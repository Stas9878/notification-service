services:
  postgres:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5

  app:
    build: 
      context: .
      dockerfile: deploy/Dockerfile
    container_name: app
    command: uv run uvicorn app.main:app --host 0.0.0.0 --port 8000
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      worker:
        condition: service_healthy
      postgres:
        condition: service_completed_successfully
    restart: on-failure:5

  worker:
    build:
      context: .
      dockerfile: deploy/Dockerfile
    container_name: worker
    command: uv run task worker
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "uv", "run", "task", "worker"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: on-failure:5

volumes:
  postgres_data:
  rabbitmq_data: